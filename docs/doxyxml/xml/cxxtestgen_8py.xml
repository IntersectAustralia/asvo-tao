<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="cxxtestgen_8py" kind="file">
    <compoundname>cxxtestgen.py</compoundname>
    <innernamespace refid="namespacecxxtestgen">cxxtestgen</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!/usr/bin/python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="stringliteral">&apos;&apos;&apos;Usage:<sp/>%s<sp/>[OPTIONS]<sp/>&lt;input<sp/>file(s)&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">Generate<sp/>test<sp/>source<sp/>file<sp/>for<sp/>CxxTest.</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"><sp/><sp/>-v,<sp/>--version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Write<sp/>CxxTest<sp/>version</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"><sp/><sp/>-o,<sp/>--output=NAME<sp/><sp/><sp/><sp/><sp/><sp/>Write<sp/>output<sp/>to<sp/>file<sp/>NAME</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"><sp/><sp/>--runner=CLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>a<sp/>main()<sp/>function<sp/>that<sp/>runs<sp/>CxxTest::CLASS</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/><sp/>--gui=CLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Like<sp/>--runner,<sp/>with<sp/>GUI<sp/>component</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/>--error-printer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Same<sp/>as<sp/>--runner=ErrorPrinter</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/>--abort-on-fail<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Abort<sp/>tests<sp/>on<sp/>failed<sp/>asserts<sp/>(like<sp/>xUnit)</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/>--have-std<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>standard<sp/>library<sp/>(even<sp/>if<sp/>not<sp/>found<sp/>in<sp/>tests)</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/>--no-std<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Don\&apos;t<sp/>use<sp/>standard<sp/>library<sp/>(even<sp/>if<sp/>found<sp/>in<sp/>tests)</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/>--have-eh<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>exception<sp/>handling<sp/>(even<sp/>if<sp/>not<sp/>found<sp/>in<sp/>tests)</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/>--no-eh<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Don\&apos;t<sp/>use<sp/>exception<sp/>handling<sp/>(even<sp/>if<sp/>found<sp/>in<sp/>tests)</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/>--longlong=[TYPE]<sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>TYPE<sp/>(default:<sp/>long<sp/>long)<sp/>as<sp/>long<sp/>long</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/>--template=TEMPLATE<sp/><sp/><sp/><sp/>Use<sp/>TEMPLATE<sp/>file<sp/>to<sp/>generate<sp/>the<sp/>test<sp/>runner</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/>--include=HEADER<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Include<sp/>HEADER<sp/>in<sp/>test<sp/>runner<sp/>before<sp/>other<sp/>headers</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/>--root<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Write<sp/>CxxTest<sp/>globals</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/>--part<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Don\&apos;t<sp/>write<sp/>CxxTest<sp/>globals</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/>--no-static-init<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Don\&apos;t<sp/>rely<sp/>on<sp/>static<sp/>initialization</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>getopt</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>glob</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>string</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Global<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">suites<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="31"><highlight class="normal">suite<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">inBlock<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">outputFileName<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">runner<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">gui<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">root<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">part<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">noStaticInit<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">templateFileName<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">headers<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">haveExceptionHandling<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="44"><highlight class="normal">noExceptionHandling<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="45"><highlight class="normal">haveStandardLibrary<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="46"><highlight class="normal">noStandardLibrary<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="47"><highlight class="normal">abortOnFail<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="48"><highlight class="normal">factor<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="49"><highlight class="normal">longlong<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">main():</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;The<sp/>main<sp/>program&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>files<sp/>=<sp/>parseCommandline()</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>scanInputFiles(<sp/>files<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>writeOutput()</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">usage(<sp/>problem<sp/>=<sp/>None<sp/>):</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Print<sp/>usage<sp/>info<sp/>and<sp/>exit&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>problem<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>usageString()</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(0)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.stderr.write(<sp/>usageString()<sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort(<sp/>problem<sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">usageString():</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Construct<sp/>program<sp/>usage<sp/>string&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__doc__<sp/>%<sp/>sys.argv[0]</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">abort(<sp/>problem<sp/>):</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Print<sp/>error<sp/>message<sp/>and<sp/>exit&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.stderr.write(<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.stderr.write(<sp/>problem<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.stderr.write(<sp/></highlight><highlight class="stringliteral">&apos;\n\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.exit(2)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">parseCommandline():</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Analyze<sp/>command<sp/>line<sp/>arguments&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options,<sp/>patterns<sp/>=<sp/>getopt.getopt(<sp/>sys.argv[1:],<sp/></highlight><highlight class="stringliteral">&apos;o:r:&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&apos;version&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;output=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;runner=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;gui=&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;error-printer&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;abort-on-fail&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;have-std&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;no-std&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;have-eh&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;no-eh&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;template=&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;include=&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;root&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;part&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;no-static-init&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;factor&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;longlong=&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>getopt.error,<sp/>problem:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage(<sp/>problem<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>setOptions(<sp/>options<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setFiles(<sp/>patterns<sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">setOptions(<sp/>options<sp/>):</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>options<sp/>specified<sp/>on<sp/>command<sp/>line&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>outputFileName,<sp/>templateFileName,<sp/>runner,<sp/>gui,<sp/>haveStandardLibrary,<sp/>factor,<sp/>longlong</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>haveExceptionHandling,<sp/>noExceptionHandling,<sp/>abortOnFail,<sp/>headers,<sp/>root,<sp/>part,<sp/>noStaticInit</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>o,<sp/>a<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>options:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>o<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;-v&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--version&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printVersion()</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;-o&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--output&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFileName<sp/>=<sp/>a</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--template&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templateFileName<sp/>=<sp/>a</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--runner&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runner<sp/>=<sp/>a</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--gui&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui<sp/>=<sp/>a</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--include&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>re.match(<sp/></highlight><highlight class="stringliteral">r&apos;^[&quot;&lt;].*[&gt;&quot;]$&apos;</highlight><highlight class="normal">,<sp/>a<sp/>):</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(</highlight><highlight class="stringliteral">&apos;&quot;%s&quot;&apos;</highlight><highlight class="normal"><sp/>%<sp/>a)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headers.append(<sp/>a<sp/>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--error-printer&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runner<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;ErrorPrinter&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>haveStandardLibrary<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--abort-on-fail&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abortOnFail<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--have-std&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>haveStandardLibrary<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--no-std&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noStandardLibrary<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--have-eh&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>haveExceptionHandling<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--no-eh&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noExceptionHandling<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--root&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--part&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--no-static-init&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noStaticInit<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--factor&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>o<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;--longlong&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>a:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longlong<sp/>=<sp/>a</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longlong<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;long<sp/>long&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>noStaticInit<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(root<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>part):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort(<sp/></highlight><highlight class="stringliteral">&apos;--no-static-init<sp/>cannot<sp/>be<sp/>used<sp/>with<sp/>--root/--part&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gui<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>runner:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runner<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;StdioPrinter&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">printVersion():</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Print<sp/>CxxTest<sp/>version<sp/>and<sp/>exit&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.stdout.write(<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>CxxTest<sp/>version<sp/>3.10.1.\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.exit(0)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">setFiles(<sp/>patterns<sp/>):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Set<sp/>input<sp/>files<sp/>specified<sp/>on<sp/>command<sp/>line&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>files<sp/>=<sp/>expandWildcards(<sp/>patterns<sp/>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(files)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>root:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>input<sp/>files<sp/>found&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>files</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">expandWildcards(<sp/>patterns<sp/>):</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Expand<sp/>all<sp/>wildcards<sp/>in<sp/>an<sp/>array<sp/>(glob)&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>fileNames<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>pathName<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>patterns:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patternFiles<sp/>=<sp/>glob.glob(<sp/>pathName<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fileName<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>patternFiles:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileNames.append(<sp/>fixBackslashes(<sp/>fileName<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fileNames</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">fixBackslashes(<sp/>fileName<sp/>):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Convert<sp/>backslashes<sp/>to<sp/>slashes<sp/>in<sp/>file<sp/>name&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re.sub(<sp/></highlight><highlight class="stringliteral">r&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/>fileName,<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanInputFiles(files):</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Scan<sp/>all<sp/>input<sp/>files<sp/>for<sp/>test<sp/>suites&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>files:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanInputFile(file)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>suites</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(suites)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>root:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort(<sp/></highlight><highlight class="stringliteral">&apos;No<sp/>tests<sp/>defined&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanInputFile(fileName):</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Scan<sp/>single<sp/>input<sp/>file<sp/>for<sp/>test<sp/>suites&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>=<sp/>open(fileName)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>lineNo<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>file.readline()</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineNo<sp/>=<sp/>lineNo<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanInputLine(<sp/>fileName,<sp/>lineNo,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>closeSuite()</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close()</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanInputLine(<sp/>fileName,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Scan<sp/>single<sp/>input<sp/>line<sp/>for<sp/>interesting<sp/>stuff&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>scanLineForExceptionHandling(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>scanLineForStandardLibrary(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>scanLineForSuiteStart(<sp/>fileName,<sp/>lineNo,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>suite</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>suite:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanLineInsideSuite(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanLineInsideSuite(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Analyze<sp/>line<sp/>which<sp/>is<sp/>part<sp/>of<sp/>a<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>inBlock</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lineBelongsToSuite(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanLineForTest(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanLineForCreate(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanLineForDestroy(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">lineBelongsToSuite(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Returns<sp/>whether<sp/>current<sp/>line<sp/>is<sp/>part<sp/>of<sp/>the<sp/>current<sp/>suite.</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>can<sp/>be<sp/>false<sp/>when<sp/>we<sp/>are<sp/>in<sp/>a<sp/>generated<sp/>suite<sp/>outside<sp/>of<sp/>CXXTEST_CODE()<sp/>blocks</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>suite<sp/>is<sp/>generated,<sp/>adds<sp/>the<sp/>line<sp/>to<sp/>the<sp/>list<sp/>of<sp/>lines&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>suite[</highlight><highlight class="stringliteral">&apos;generated&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>inBlock</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>inBlock:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inBlock<sp/>=<sp/>lineStartsBlock(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>inBlock:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inBlock<sp/>=<sp/>addLineToBlock(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inBlock</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">std_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&quot;\b(std\s*::|CXXTEST_STD|using\s+namespace\s+std\b|^\s*\#\s*include\s+&lt;[a-z0-9]+&gt;)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanLineForStandardLibrary(<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Check<sp/>if<sp/>current<sp/>line<sp/>uses<sp/>standard<sp/>library&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>haveStandardLibrary,<sp/>noStandardLibrary</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>haveStandardLibrary<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>std_re.search(line):</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>noStandardLibrary:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>haveStandardLibrary<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">exception_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&quot;\b(throw|try|catch|TSM?_ASSERT_THROWS[A-Z_]*)\b&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanLineForExceptionHandling(<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Check<sp/>if<sp/>current<sp/>line<sp/>uses<sp/>exception<sp/>handling&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>haveExceptionHandling,<sp/>noExceptionHandling</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>haveExceptionHandling<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>exception_re.search(line):</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>noExceptionHandling:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>haveExceptionHandling<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">suite_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&apos;\bclass\s+(\w+)\s*:\s*public\s+((::)?\s*CxxTest\s*::\s*)?TestSuite\b&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">generatedSuite_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&apos;\bCXXTEST_SUITE\s*\(\s*(\w*)\s*\)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanLineForSuiteStart(<sp/>fileName,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Check<sp/>if<sp/>current<sp/>line<sp/>starts<sp/>a<sp/>new<sp/>test<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>suite_re.search(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>m:</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startSuite(<sp/>m.group(1),<sp/>fileName,<sp/>lineNo,<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>generatedSuite_re.search(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>m:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.stdout.write(<sp/></highlight><highlight class="stringliteral">&quot;%s:%s:<sp/>Warning:<sp/>Inline<sp/>test<sp/>suites<sp/>are<sp/>deprecated.\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>(fileName,<sp/>lineNo)<sp/>)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startSuite(<sp/>m.group(1),<sp/>fileName,<sp/>lineNo,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">startSuite(<sp/>name,<sp/>file,<sp/>line,<sp/>generated<sp/>):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Start<sp/>scanning<sp/>a<sp/>new<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>suite</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>closeSuite()</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>suite<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>file,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;cfile&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cstr(file),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>line,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;generated&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>generated,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;suite_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>name,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;dobject&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;suiteDescription_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>name,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;Tests_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>name,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;tests&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>[],</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;lines&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>[]<sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">lineStartsBlock(<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Check<sp/>if<sp/>current<sp/>line<sp/>starts<sp/>a<sp/>new<sp/>CXXTEST_CODE()<sp/>block&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re.search(<sp/></highlight><highlight class="stringliteral">r&apos;\bCXXTEST_CODE\s*\(&apos;</highlight><highlight class="normal">,<sp/>line<sp/>)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">test_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&apos;^([^/]|/[^/])*\bvoid\s+([Tt]est\w+)\s*\(\s*(void)?\s*\)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanLineForTest(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Check<sp/>if<sp/>current<sp/>line<sp/>starts<sp/>a<sp/>test&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>test_re.search(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>m:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addTest(<sp/>suite,<sp/>m.group(2),<sp/>lineNo<sp/>)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">addTest(<sp/>suite,<sp/>name,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Add<sp/>a<sp/>test<sp/>function<sp/>to<sp/>the<sp/>current<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal"><sp/><sp/><sp/>:<sp/>name,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;suite&apos;</highlight><highlight class="normal"><sp/><sp/>:<sp/>suite,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;class&apos;</highlight><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;TestDescription_%s_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],<sp/>name),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;testDescription_%s_%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],<sp/>name),</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal"><sp/><sp/><sp/>:<sp/>line,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>suite[</highlight><highlight class="stringliteral">&apos;tests&apos;</highlight><highlight class="normal">].append(<sp/>test<sp/>)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">addLineToBlock(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Append<sp/>the<sp/>line<sp/>to<sp/>the<sp/>current<sp/>CXXTEST_CODE()<sp/>block&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>fixBlockLine(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>line<sp/>=<sp/>re.sub(<sp/></highlight><highlight class="stringliteral">r&apos;^.*\{\{&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>re.search(<sp/></highlight><highlight class="stringliteral">r&apos;\}\}&apos;</highlight><highlight class="normal">,<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>line[:e.start()]</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>suite[</highlight><highlight class="stringliteral">&apos;lines&apos;</highlight><highlight class="normal">].append(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">fixBlockLine(<sp/>suite,<sp/>lineNo,<sp/>line):</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Change<sp/>all<sp/>[E]TS_<sp/>macros<sp/>used<sp/>in<sp/>a<sp/>line<sp/>to<sp/>_[E]TS_<sp/>macros<sp/>with<sp/>the<sp/>correct<sp/>file/line&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re.sub(<sp/></highlight><highlight class="stringliteral">r&apos;\b(E?TSM?_(ASSERT[A-Z_]*|FAIL))\s*\(&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;_\1(%s,%s,&apos;</highlight><highlight class="normal"><sp/>%<sp/>(suite[</highlight><highlight class="stringliteral">&apos;cfile&apos;</highlight><highlight class="normal">],<sp/>lineNo),</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line,<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">create_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&apos;\bstatic\s+\w+\s*\*\s*createSuite\s*\(\s*(void)?\s*\)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanLineForCreate(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Check<sp/>if<sp/>current<sp/>line<sp/>defines<sp/>a<sp/>createSuite()<sp/>function&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>create_re.search(<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSuiteCreateDestroy(<sp/>suite,<sp/></highlight><highlight class="stringliteral">&apos;create&apos;</highlight><highlight class="normal">,<sp/>lineNo<sp/>)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">destroy_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&apos;\bstatic\s+void\s+destroySuite\s*\(\s*\w+\s*\*\s*\w*\s*\)&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">scanLineForDestroy(<sp/>suite,<sp/>lineNo,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Check<sp/>if<sp/>current<sp/>line<sp/>defines<sp/>a<sp/>destroySuite()<sp/>function&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>destroy_re.search(<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSuiteCreateDestroy(<sp/>suite,<sp/></highlight><highlight class="stringliteral">&apos;destroy&apos;</highlight><highlight class="normal">,<sp/>lineNo<sp/>)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">cstr(<sp/>str<sp/>):</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Convert<sp/>a<sp/>string<sp/>to<sp/>its<sp/>C<sp/>representation&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>string.replace(<sp/>str,<sp/></highlight><highlight class="stringliteral">&apos;\\&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;\\\\&apos;</highlight><highlight class="normal"><sp/>)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">addSuiteCreateDestroy(<sp/>suite,<sp/>which,<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Add<sp/>createSuite()/destroySuite()<sp/>to<sp/>current<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>suite.has_key(which):</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort(<sp/></highlight><highlight class="stringliteral">&apos;%s:%s:<sp/>%sSuite()<sp/>already<sp/>declared&apos;</highlight><highlight class="normal"><sp/>%<sp/>(<sp/>suite[</highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal">],<sp/>str(line),<sp/>which<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>suite[which]<sp/>=<sp/>line</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">closeSuite():</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Close<sp/>current<sp/>suite<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>list<sp/>if<sp/>valid&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>suite</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>suite<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(suite[</highlight><highlight class="stringliteral">&apos;tests&apos;</highlight><highlight class="normal">])<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verifySuite(suite)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rememberSuite(suite)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suite<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">verifySuite(suite):</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Verify<sp/>current<sp/>suite<sp/>is<sp/>legal&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>suite.has_key(</highlight><highlight class="stringliteral">&apos;create&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>suite.has_key(</highlight><highlight class="stringliteral">&apos;destroy&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort(<sp/></highlight><highlight class="stringliteral">&apos;%s:%s:<sp/>Suite<sp/>%s<sp/>has<sp/>createSuite()<sp/>but<sp/>no<sp/>destroySuite()&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(suite[</highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;create&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>suite.has_key(</highlight><highlight class="stringliteral">&apos;destroy&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>suite.has_key(</highlight><highlight class="stringliteral">&apos;create&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort(<sp/></highlight><highlight class="stringliteral">&apos;%s:%s:<sp/>Suite<sp/>%s<sp/>has<sp/>destroySuite()<sp/>but<sp/>no<sp/>createSuite()&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(suite[</highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;destroy&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">rememberSuite(suite):</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Add<sp/>current<sp/>suite<sp/>to<sp/>list&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>suites</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>suites.append(<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeOutput():</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Create<sp/>output<sp/>file&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>templateFileName:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeTemplateOutput()</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSimpleOutput()</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeSimpleOutput():</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Create<sp/>output<sp/>not<sp/>based<sp/>on<sp/>template&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>startOutputFile()</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>writePreamble(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>writeMain(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>writeWorld(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>output.close()</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">include_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&quot;\s*\#\s*include\s+&lt;cxxtest/&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">preamble_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&quot;^\s*&lt;CxxTest\s+preamble&gt;\s*$&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">world_re<sp/>=<sp/>re.compile(<sp/></highlight><highlight class="stringliteral">r&quot;^\s*&lt;CxxTest\s+world&gt;\s*$&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeTemplateOutput():</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Create<sp/>output<sp/>based<sp/>on<sp/>template<sp/>file&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>=<sp/>open(templateFileName)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>startOutputFile()</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>template.readline()</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>include_re.search(<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePreamble(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>preamble_re.search(<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writePreamble(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>world_re.search(<sp/>line<sp/>):</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeWorld(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/>line<sp/>)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>template.close()</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>output.close()</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">startOutputFile():</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Create<sp/>output<sp/>file<sp/>and<sp/>write<sp/>header&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>outputFileName<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>open(<sp/>outputFileName,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>sys.stdout</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;/*<sp/>Generated<sp/>file,<sp/>do<sp/>not<sp/>edit<sp/>*/\n\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">wrotePreamble<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writePreamble(<sp/>output<sp/>):</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>the<sp/>CxxTest<sp/>header<sp/>(#includes<sp/>and<sp/>#defines)&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>wrotePreamble,<sp/>headers,<sp/>longlong</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>wrotePreamble:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#ifndef<sp/>CXXTEST_RUNNING\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>CXXTEST_RUNNING\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#endif\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>haveStandardLibrary:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>_CXXTEST_HAVE_STD\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>haveExceptionHandling:</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>_CXXTEST_HAVE_EH\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abortOnFail:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>_CXXTEST_ABORT_TEST_ON_FAIL\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>longlong:</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>_CXXTEST_LONGLONG<sp/>%s\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>longlong<sp/>)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>factor:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#define<sp/>_CXXTEST_FACTOR\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>header<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>headers:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>%s\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>header<sp/>)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;cxxtest/TestListener.h&gt;\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;cxxtest/TestTracker.h&gt;\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;cxxtest/TestRunner.h&gt;\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;cxxtest/RealDescriptions.h&gt;\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>runner:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;cxxtest/%s.h&gt;\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>runner<sp/>)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gui:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;cxxtest/%s.h&gt;\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>gui<sp/>)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>wrotePreamble<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeMain(<sp/>output<sp/>):</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>the<sp/>main()<sp/>function<sp/>for<sp/>the<sp/>test<sp/>runner&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral">#ifndef<sp/>MPICH_SKIP_MPICXX</highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral">#define<sp/>MPICH_SKIP_MPICXX</highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="435"><highlight class="stringliteral">#include<sp/>&lt;mpi.h&gt;</highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gui:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;int<sp/>main(<sp/>int<sp/>argc,<sp/>char<sp/>*argv[]<sp/>)<sp/>{\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>MPI_Init(&amp;argc,<sp/>&amp;argv);\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>noStaticInit:</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>CxxTest::initialize();\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>int<sp/>ec<sp/>=<sp/>CxxTest::GuiTuiRunner&lt;CxxTest::%s,<sp/>CxxTest::%s&gt;(<sp/>argc,<sp/>argv<sp/>).run();\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>(gui,<sp/>runner)<sp/>)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>MPI_Finalize();\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>return<sp/>ec;\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>runner:</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;int<sp/>main(<sp/>int<sp/>argc,<sp/>char<sp/>*argv[]<sp/>)<sp/>{\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>MPI_Init(&amp;argc,<sp/>&amp;argv);\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>noStaticInit:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>CxxTest::initialize();\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>int<sp/>ec<sp/>=<sp/>CxxTest::%s().run();\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>runner<sp/>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>MPI_Finalize();\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>return<sp/>ec;\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">wroteWorld<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeWorld(<sp/>output<sp/>):</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>the<sp/>world<sp/>definitions&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>wroteWorld,<sp/>part</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>wroteWorld:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>writePreamble(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>writeSuites(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>root<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>part:</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeRoot(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>noStaticInit:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeInitialize(<sp/>output<sp/>)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>wroteWorld<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeSuites(output):</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>all<sp/>TestDescriptions<sp/>and<sp/>SuiteDescriptions&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>suite<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>suites:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeInclude(<sp/>output,<sp/>suite[</highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isGenerated(suite):</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generateSuite(<sp/>output,<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isDynamic(suite):</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSuitePointer(<sp/>output,<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSuiteObject(<sp/>output,<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeTestList(<sp/>output,<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSuiteDescription(<sp/>output,<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeTestDescriptions(<sp/>output,<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">isGenerated(suite):</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Checks<sp/>whether<sp/>a<sp/>suite<sp/>class<sp/>should<sp/>be<sp/>created&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>suite[</highlight><highlight class="stringliteral">&apos;generated&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">isDynamic(suite):</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Checks<sp/>whether<sp/>a<sp/>suite<sp/>is<sp/>dynamic&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>suite.has_key(</highlight><highlight class="stringliteral">&apos;create&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">lastIncluded<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeInclude(output,<sp/>file):</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Add<sp/>#include<sp/>&quot;file&quot;<sp/>statement&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>lastIncluded</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>file<sp/>==<sp/>lastIncluded:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>output.writelines(<sp/>[<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal">,<sp/>file,<sp/></highlight><highlight class="stringliteral">&apos;&quot;\n\n&apos;</highlight><highlight class="normal"><sp/>]<sp/>)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>lastIncluded<sp/>=<sp/>file</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">generateSuite(<sp/>output,<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>a<sp/>suite<sp/>declared<sp/>with<sp/>CXXTEST_SUITE()&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;class<sp/>%s<sp/>:<sp/>public<sp/>CxxTest::TestSuite<sp/>{\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;public:\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>suite[</highlight><highlight class="stringliteral">&apos;lines&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(line)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;};\n\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeSuitePointer(<sp/>output,<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Create<sp/>static<sp/>suite<sp/>pointer<sp/>object<sp/>for<sp/>dynamic<sp/>suites&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>noStaticInit:</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;static<sp/>%s<sp/>*%s;\n\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>(suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;static<sp/>%s<sp/>*%s<sp/>=<sp/>0;\n\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>(suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeSuiteObject(<sp/>output,<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Create<sp/>static<sp/>suite<sp/>object<sp/>for<sp/>non-dynamic<sp/>suites&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>output.writelines(<sp/>[<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>&quot;</highlight><highlight class="normal">,<sp/>suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">],<sp/></highlight><highlight class="stringliteral">&quot;;\n\n&quot;</highlight><highlight class="normal"><sp/>]<sp/>)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeTestList(<sp/>output,<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>the<sp/>head<sp/>of<sp/>the<sp/>test<sp/>linked<sp/>list<sp/>for<sp/>a<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>noStaticInit:</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;static<sp/>CxxTest::List<sp/>%s;\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;static<sp/>CxxTest::List<sp/>%s<sp/>=<sp/>{<sp/>0,<sp/>0<sp/>};\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeTestDescriptions(<sp/>output,<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>all<sp/>test<sp/>descriptions<sp/>for<sp/>a<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>test<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>suite[</highlight><highlight class="stringliteral">&apos;tests&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeTestDescription(<sp/>output,<sp/>suite,<sp/>test<sp/>)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeTestDescription(<sp/>output,<sp/>suite,<sp/>test<sp/>):</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>test<sp/>description<sp/>object&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;static<sp/>class<sp/>%s<sp/>:<sp/>public<sp/>CxxTest::RealTestDescription<sp/>{\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>test[</highlight><highlight class="stringliteral">&apos;class&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;public:\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>noStaticInit:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>%s()<sp/>:<sp/>CxxTest::RealTestDescription(<sp/>%s,<sp/>%s,<sp/>%s,<sp/>&quot;%s&quot;<sp/>)<sp/>{}\n&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(test[</highlight><highlight class="stringliteral">&apos;class&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;dobject&apos;</highlight><highlight class="normal">],<sp/>test[</highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal">],<sp/>test[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>void<sp/>runTest()<sp/>{<sp/>%s<sp/>}\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>runBody(<sp/>suite,<sp/>test<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;}<sp/>%s;\n\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>test[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">runBody(<sp/>suite,<sp/>test<sp/>):</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Body<sp/>of<sp/>TestDescription::run()&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isDynamic(suite):<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dynamicRun(<sp/>suite,<sp/>test<sp/>)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>staticRun(<sp/>suite,<sp/>test<sp/>)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">dynamicRun(<sp/>suite,<sp/>test<sp/>):</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Body<sp/>of<sp/>TestDescription::run()<sp/>for<sp/>test<sp/>in<sp/>a<sp/>dynamic<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>)<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>test[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;();&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">staticRun(<sp/>suite,<sp/>test<sp/>):</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Body<sp/>of<sp/>TestDescription::run()<sp/>for<sp/>test<sp/>in<sp/>a<sp/>non-dynamic<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>+<sp/>test[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;();&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeSuiteDescription(<sp/>output,<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>SuiteDescription<sp/>object&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isDynamic(<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeDynamicDescription(<sp/>output,<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeStaticDescription(<sp/>output,<sp/>suite<sp/>)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeDynamicDescription(<sp/>output,<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>SuiteDescription<sp/>for<sp/>a<sp/>dynamic<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;CxxTest::DynamicSuiteDescription&lt;%s&gt;<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;dobject&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>noStaticInit:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;(<sp/>%s,<sp/>%s,<sp/>&quot;%s&quot;,<sp/>%s,<sp/>%s,<sp/>%s,<sp/>%s<sp/>)&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(suite[</highlight><highlight class="stringliteral">&apos;cfile&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;create&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;destroy&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;;\n\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeStaticDescription(<sp/>output,<sp/>suite<sp/>):</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>SuiteDescription<sp/>for<sp/>a<sp/>static<sp/>suite&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;CxxTest::StaticSuiteDescription<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>suite[</highlight><highlight class="stringliteral">&apos;dobject&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>noStaticInit:</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;(<sp/>%s,<sp/>%s,<sp/>&quot;%s&quot;,<sp/>%s,<sp/>%s<sp/>)&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(suite[</highlight><highlight class="stringliteral">&apos;cfile&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;;\n\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeRoot(output):</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>static<sp/>members<sp/>of<sp/>CxxTest<sp/>classes&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;cxxtest/Root.cpp&gt;\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">writeInitialize(output):</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;Write<sp/>CxxTest::initialize(),<sp/>which<sp/>replaces<sp/>static<sp/>initialization&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;namespace<sp/>CxxTest<sp/>{\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>void<sp/>initialize()\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>{\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>suite<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>suites:</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>%s.initialize();\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isDynamic(suite):</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>%s<sp/>=<sp/>0;\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">]<sp/>)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>%s.initialize(<sp/>%s,<sp/>%s,<sp/>&quot;%s&quot;,<sp/>%s,<sp/>%s,<sp/>%s,<sp/>%s<sp/>);\n&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(suite[</highlight><highlight class="stringliteral">&apos;dobject&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;cfile&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;create&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;destroy&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>%s.initialize(<sp/>%s,<sp/>%s,<sp/>&quot;%s&quot;,<sp/>%s,<sp/>%s<sp/>);\n&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(suite[</highlight><highlight class="stringliteral">&apos;dobject&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;cfile&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suite[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>test<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>suite[</highlight><highlight class="stringliteral">&apos;tests&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>%s.initialize(<sp/>%s,<sp/>%s,<sp/>%s,<sp/>&quot;%s&quot;<sp/>);\n&apos;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(test[</highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;tlist&apos;</highlight><highlight class="normal">],<sp/>suite[</highlight><highlight class="stringliteral">&apos;dobject&apos;</highlight><highlight class="normal">],<sp/>test[</highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal">],<sp/>test[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">])<sp/>)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;<sp/>}\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>output.write(<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">main()</highlight></codeline>
    </programlisting>
    <location file="/Users/carlos/Devel/ASVO/asvo-tao/science_modules/cxxtest/scripts/cxxtestgen.py"/>
  </compounddef>
</doxygen>
